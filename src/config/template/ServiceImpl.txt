package @@PACKAGE_NAME@@.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import @@PACKAGE_NAME@@.model.@@CLASS_NAME@@;
import @@PACKAGE_NAME@@.repository.@@CLASS_NAME@@Repository;

/**
 * This class is responsible for handling business aspects of {@link  @@CLASS_NAME@@} functionality.
 * 
 * It can call methods on other Service classes and its own Repository class only. However, it shouldn't 
 * call Repository classes of other Services directly.
 * 
 * The instances of other Services and its own Repository can be obtained by Spring's Auto-wiring feature.
 * 
 * Any business specific exception should be explicitly handled here and corresponding
 * error message/code should be logged.
 *  
 * @author Afshar Ahmed
 */
@Service
public class @@CLASS_NAME@@ServiceImpl implements @@CLASS_NAME@@Service 
{
	private Logger	logger	= LoggerFactory.getLogger( @@CLASS_NAME@@ServiceImpl.class );

	@Autowired
	private @@CLASS_NAME@@Repository @@CLASS_NAME_LO@@Repository;
	
	public void set@@CLASS_NAME@@Repository(@@CLASS_NAME@@Repository @@CLASS_NAME_LO@@Repository)
	{
		this.@@CLASS_NAME_LO@@Repository = @@CLASS_NAME_LO@@Repository;
	}


	/**
	 * Finds all {@link @@CLASS_NAME@@} records in DB.
	 * 
	 * @return List<@@CLASS_NAME@@>  List of @@CLASS_NAME@@ objects found.
	 */	
	@Transactional
	@Override
	public List<@@CLASS_NAME@@> findAll@@CLASS_NAME@@s()
	{
		return @@CLASS_NAME_LO@@Repository.findAll@@CLASS_NAME@@s();
	}

	/**
	 * Finds {@link @@CLASS_NAME@@} using the passed id parameter.
	 * 
	 * @param id
	 * @return @@CLASS_NAME@@  Object of @@CLASS_NAME@@ found using given id.
	 */
	@Transactional
	@Override
	public @@CLASS_NAME@@ find@@CLASS_NAME@@ById(Integer id)
	{
		return @@CLASS_NAME_LO@@Repository.find@@CLASS_NAME@@ById(id);		
	}

	/**
	 * Adds a record for object {@link @@CLASS_NAME@@}
	 * 
	 * @param @@CLASS_NAME@@  The @@CLASS_NAME_LO@@ Object to be added 
	 */
	@Override
	public void add@@CLASS_NAME@@(@@CLASS_NAME@@ @@CLASS_NAME_LO@@)
	{
		@@CLASS_NAME_LO@@Repository.add@@CLASS_NAME@@(@@CLASS_NAME_LO@@);
	}
	
	/**
	 * Update a record for object {@link @@CLASS_NAME@@} 
	 * 
	 * @param @@CLASS_NAME@@  The @@CLASS_NAME_LO@@ Object to be updated
	 */
	@Override
	public void update@@CLASS_NAME@@(@@CLASS_NAME@@ @@CLASS_NAME_LO@@)
	{
		@@CLASS_NAME_LO@@Repository.update@@CLASS_NAME@@(@@CLASS_NAME_LO@@);
	}

	/**
	 * Delete a record for object {@link @@CLASS_NAME@@} 
	 * 
	 * @param Integer	  PrimaryKey (Id) of the record to be deleted
	 * @param @@CLASS_NAME@@  The @@CLASS_NAME_LO@@ Object to be deleted
	 */
	@Override	
	public void delete@@CLASS_NAME@@(final Integer id)
	{
		@@CLASS_NAME_LO@@Repository.delete@@CLASS_NAME@@(id);
	}
}
