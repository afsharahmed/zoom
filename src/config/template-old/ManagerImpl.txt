package @@PACKAGE_NAME@@.manager;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import com.ibm.json.java.JSONArray;
import com.ibm.json.java.OrderedJSONObject;
import @@PACKAGE_NAME@@.dao.@@CLASS_NAME@@Dao;
import @@PACKAGE_NAME@@.exception.AddException;
import @@PACKAGE_NAME@@.exception.DeleteException;
import @@PACKAGE_NAME@@.exception.NotFoundException;
import @@PACKAGE_NAME@@.exception.UpdateException;
import @@PACKAGE_NAME@@.model.@@CLASS_NAME@@;

 /**
 * This class is responsible for handling business aspects of {@link  @@CLASS_NAME@@} functionality.
 * 
 * It can call methods on other Manager classes and its own DAO class only. However, it shouldn't 
 * call DAO classes of other Managers directly.
 * 
 * The instances of other Managers and its own DAO can be obtained by Spring's Auto-wiring feature.
 * 
 * Any business specific exception should be explicitly handled here and corresponding
 * error message/code should be logged.
 *  
 * @author Afshar Ahmed
 */
@Transactional
public class @@CLASS_NAME@@ManagerImpl implements @@CLASS_NAME@@Manager 
{
	private Logger	logger	= LoggerFactory.getLogger( @@CLASS_NAME@@ManagerImpl.class );

	@Autowired
	private @@CLASS_NAME@@Dao @@CLASS_NAME_LO@@Dao;
	
	public void set@@CLASS_NAME@@Dao(@@CLASS_NAME@@Dao @@CLASS_NAME_LO@@Dao)
	{
		this.@@CLASS_NAME_LO@@Dao = @@CLASS_NAME_LO@@Dao;
	}


	/**
	 * Finds an {@link @@CLASS_NAME@@} record from DB for the given primary key.
	 * 
	 * @param  String	   Id (PrimaryKey) of the object to be found
	 * @return @@CLASS_NAME@@  Object of @@CLASS_NAME@@ found using given Id
	 */
	public @@CLASS_NAME@@ findByPrimaryKey(String id)
	{
		@@CLASS_NAME@@ @@CLASS_NAME_LO@@ = null;
		
		try
		{
			@@CLASS_NAME_LO@@ = @@CLASS_NAME_LO@@Dao.findByPrimaryKey( id );
		}
		catch ( NotFoundException e )
		{
			e.printStackTrace();
		}
		
		return @@CLASS_NAME_LO@@;
	}	
	
	/**
	 * Finds all {@link @@CLASS_NAME@@} records in DB
	 * Converts the list of AlertSettings retrieved from DB into JSONArray & return
	 * the array.
         *
	 * @return {@link JSONArray}  JSONArray of @@CLASS_NAME@@ objects found.
	 */
	public JSONArray findAll()
	{
		JSONArray jsArray = new JSONArray();
		List<@@CLASS_NAME@@> list = null;
		
		try 
		{
			list = @@CLASS_NAME_LO@@Dao.findAll();
			for (@@CLASS_NAME@@ obj : list)
			{
				OrderedJSONObject jsObject = new OrderedJSONObject();
				
				@@LOOP-BEGIN@@
				jsObject.put("@@PROPERTY_NAME@@", obj.get@@PROPERTY_NAME_UP@@());
				@@LOOP-END@@
				
				jsArray.add(jsObject);
			}
			
		} catch (NotFoundException e) {
			logger.error("Error occured while retrieving @@CLASS_NAME@@s");
			e.printStackTrace();
		}
		
		return jsArray;
	}
	
	/**
	 * Add {@link @@CLASS_NAME@@} record in DB
	 * 
	 * @param @@CLASS_NAME@@  The @@CLASS_NAME_LO@@ object (record) to be added
	 * @return Boolean 	  Operation status flag that will be true if record added successfully else false.
	 */	
	public Boolean add@@CLASS_NAME@@(@@CLASS_NAME@@ @@CLASS_NAME_LO@@)
	{
		try
		{
			@@CLASS_NAME_LO@@Dao.add@@CLASS_NAME@@( @@CLASS_NAME_LO@@ );
			return true;
		}
		catch ( AddException e )
		{
			e.printStackTrace();
		}
		
		return false;
	}


	/**
	 * Update a {@link @@CLASS_NAME@@} record in DB
	 *
	 * @param @@CLASS_NAME@@  The @@CLASS_NAME_LO@@ object (record) to be updated
	 * @return Boolean 	  Operation status flag that will be true if record updated successfully else false. 
	 */
	public Boolean update@@CLASS_NAME@@(@@CLASS_NAME@@ @@CLASS_NAME_LO@@)
	{
		try
		{
			@@CLASS_NAME_LO@@Dao.update@@CLASS_NAME@@( @@CLASS_NAME_LO@@ );
			return true;
		}
		catch ( UpdateException e )
		{
			e.printStackTrace();
		}
		
		return false;	
	}


	/**
	 * Delete {@link @@CLASS_NAME@@} record from DB for the given Id (primary key)
	 * @param String 	PrimaryKey (Id) of the record to be deleted
	 * @return Boolean 	Operation status flag that will be true if record deleted successfully else false.
	 */
	public Boolean delete@@CLASS_NAME@@(final String id)
	{
		try
		{
			@@CLASS_NAME_LO@@Dao.delete@@CLASS_NAME@@( id );
			return true;
		}
		catch ( DeleteException e )
		{
			e.printStackTrace();
		}
		
		return false;		
	}


}
